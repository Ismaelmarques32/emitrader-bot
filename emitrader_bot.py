import os
import asyncio
import datetime
import pytz
import nest_asyncio
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# Vari√°veis globais
operation_type = None
relatorio = []
relatorio_total = []
current_operation = {}
waiting_for_gale_time = False
gale_stage = 0  # Vari√°vel para controlar qual Gale est√° sendo confirmado

# Substitua pelos file_ids reais dos stickers
STICKER_WIN = 'CAACAgEAAxkBAAPhZsnoOnV7QkVn-3CbCRKC2e3XmuoAAjIEAAI6q-BF_bQwkyhGNVw1BA'
STICKER_LOSS = 'CAACAgEAAxkBAAPdZsnoL2B38wOunaWwLwkOaTNaoR8AAiEEAAI019hFwqt42sFtXOM1BA'
STICKER_SESSAO_INICIADA = 'CAACAgEAAxkBAAPfZsnoNZDjN_edHpedotkV6ZkfkWoAAgcGAALttuBF8IaPc-uNIoA1BA'

# ID do canal substitu√≠do pelo username do canal p√∫blico
CHANNEL_ID = '@testesinaisemi' #'@emitrader'

# Fun√ß√£o para o comando de in√≠cio
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üöÄ Iniciar Sess√£o", callback_data='inicia_sessao'),
            InlineKeyboardButton("üõë Encerrar Sess√£o", callback_data='sessao_encerrada')
        ],
        [
            InlineKeyboardButton("üìà Enviar Sinal CALL", callback_data='call'),
            InlineKeyboardButton("üìâ Enviar Sinal PUT", callback_data='put')
        ],
        [
            InlineKeyboardButton("üìä Gerar Relat√≥rio", callback_data='menu_relatorio'),
            InlineKeyboardButton("üë∂ Novatos", callback_data='novatos')
        ],
        [
            InlineKeyboardButton("üìã Enquete - Experi√™ncia", callback_data='enquete'),
            InlineKeyboardButton("üí∏ Enquete - Lucro", callback_data='enquete_lucro')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    start_message = (
      "üëã Bem-vindo ao EMI TRADER Bot! \n\n"
"Comece suas sess√µes, envie sinais e gere relat√≥rios com facilidade. Escolha uma op√ß√£o no menu e vamos l√°! üëá"
    )
    await update.message.reply_text(start_message, reply_markup=reply_markup, parse_mode="Markdown")

# Fun√ß√£o para lidar com as op√ß√µes do menu
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global operation_type, relatorio, current_operation, relatorio_total, waiting_for_gale_time, gale_stage
    query = update.callback_query
    await query.answer()

    if query.data == 'inicia_sessao':
        session_message = (
            "‚è∞ *EMI-TRADER ‚Äì O show dos sinais come√ßa √†s 21h! üöÄ*\n\n"
            "üì° *Live ao vivo no YouTube + Sinais no Telegram*\n\n"
            "üéØ Est√° pronto para transformar oportunidades em resultados?\n"
            "üíª Deixe sua corretora preparada e seu mindset afiado para agir no momento certo!\n\n"
            "üí° *Dica esperta:*\n"
            "Foco total! Grandes movimentos come√ßam com pequenas decis√µes ‚Äî fique atento aos nossos sinais!\n\n"
            "üëâ Abra sua corretora agora: [Clique aqui](https://broker-qx.pro/sign-up/?lid=949113)"
        )
        await query.edit_message_text(text=session_message, parse_mode="Markdown")
        await context.bot.send_message(chat_id=CHANNEL_ID, text=session_message, parse_mode="Markdown")


    elif query.data == 'sessao_encerrada':
        await encerrar_sessao(update, context)

    elif query.data == 'call':
        operation_type = 'CALL'
        await query.edit_message_text(
            text=(
                "üìä *Digite o Par, Pre√ßo (opcional) e a Hora no formato:*\n\n"
                "USD/JPY, 145.250, 16:20\n"
                "ou\n"
                "USD/JPY, 16:20 (para usar o pre√ßo 'Atual')"
            ),
            parse_mode="Markdown"
    )

    elif query.data == 'put':
        operation_type = 'PUT'
        await query.edit_message_text(
            text=(
                "üìä *Digite o Par, Pre√ßo (opcional) e a Hora no formato:*\n\n"
                "USD/JPY, 145.250, 16:20\n"
                "ou\n"
                "USD/JPY, 16:20 (para usar o pre√ßo 'Atual')"
            ),
            parse_mode="Markdown"
    )

    elif query.data == 'novatos':
        await enviar_novatos(update, context)

    elif query.data == 'enquete':
        await enviar_enquete_experiencia(update, context)

    elif query.data == 'enquete_lucro':
        await enviar_enquete_lucro(update, context)

    elif query.data.startswith('gale'):
        gale_num = int(query.data.split('_')[1])
        gale_stage = gale_num
        waiting_for_gale_time = True
        await query.edit_message_text(
            text=(
                f"üìä *Digite o Pre√ßo (opcional) e o hor√°rio no formato:*\n\n"
                f"145.250, 09:50\n"
                f"ou\n"
                f"09:50 (para usar o pre√ßo 'Atual')\n\n"
                f"Confirmando o {gale_num}¬∫ Gale."
            ),
            parse_mode="Markdown"
        )


    elif query.data == 'cancelar_entrada':
        await cancelar_entrada(update, context)

    elif query.data == 'win':
        await show_win_options(update, context)

    elif query.data == 'loss':
        await show_loss_options(update, context)

    elif query.data.startswith('win_'):
        await process_win_choice(update, context, query.data)

    elif query.data.startswith('loss_'):
        await process_loss_choice(update, context, query.data)

    elif query.data == 'preco_nao_alcancado':
        await preco_nao_alcancado(update, context)


    elif query.data == 'menu_relatorio':
        keyboard = [
            [InlineKeyboardButton("üìä Relat√≥rio Parcial", callback_data='relatorio_parcial')],
            [InlineKeyboardButton("üìä Relat√≥rio Total", callback_data='relatorio_total')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text="Escolha o tipo de relat√≥rio:", reply_markup=reply_markup)

    elif query.data == 'relatorio_parcial':
        await gerar_relatorio(update, context, relatorio, "parcial")

    elif query.data == 'relatorio_total':
        relatorio_total.extend(relatorio)
        await gerar_relatorio(update, context, relatorio_total, "total")

# Fun√ß√£o para confirmar Gale com tempo fornecido manualmente
async def handle_signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global operation_type, current_operation, waiting_for_gale_time, gale_stage

    if update.message is None:
        await update.callback_query.answer(text="Nenhuma mensagem de texto detectada.")
        return

    if waiting_for_gale_time:  # Confirma√ß√£o do Gale
        try:
            # Dividindo o texto enviado pelo usu√°rio
            text = update.message.text.split(',')
            hora = text[-1].strip()  # √öltimo item ser√° sempre o hor√°rio
            preco = "Atual"  # Valor padr√£o caso o pre√ßo n√£o seja fornecido

            # Verifica se o pre√ßo foi fornecido
            if len(text) == 2:
                preco = text[0].strip()

            # Valida o formato do hor√°rio
            datetime.datetime.strptime(hora, "%H:%M")

            # Construindo a mensagem de confirma√ß√£o
            gale_message = f"üìä Entrada confirmada para o Gale √†s {hora}, pre√ßo: {preco}."

            # Envia a mensagem para o canal
            await context.bot.send_message(chat_id=CHANNEL_ID, text=gale_message)
            waiting_for_gale_time = False  # Reseta o estado de espera do Gale

            # Menu p√≥s-Gale
            keyboard = [
                [InlineKeyboardButton("WIN ‚úÖ", callback_data='win')],
                [InlineKeyboardButton("LOSS ‚ùå", callback_data='loss')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("Escolha a pr√≥xima a√ß√£o:", reply_markup=reply_markup)
            return

        except ValueError:
            await update.message.reply_text(
                "Formato incorreto. Por favor, use o formato: Pre√ßo (opcional), Hora (xx:xx)."
            )
            return

    if operation_type in ['CALL', 'PUT']:  # Entrada principal (CALL/PUT)
        try:
            # Dividindo o texto enviado pelo usu√°rio
            text = update.message.text.split(',')
            if len(text) < 2:
                await update.message.reply_text("Formato incorreto. Por favor, use o formato: Par, Pre√ßo (opcional), Hora")
                return

            # Extraindo os dados
            par = text[0].strip()
            hora = text[-1].strip()  # √öltimo elemento sempre ser√° a hora
            preco = "Atual"  # Valor padr√£o caso o pre√ßo n√£o seja fornecido

            # Verificando se o pre√ßo foi fornecido
            if len(text) == 3:
                preco = text[1].strip()

            # Validando o formato da hora
            datetime.datetime.strptime(hora, "%H:%M")

            # Atualizando a opera√ß√£o atual
            current_operation = {
                "par": par,
                "preco": preco,
                "hora": hora,
                "tipo": operation_type,
                "resultado": None
            }

            # Criando o teclado
            keyboard = [
                [InlineKeyboardButton("1¬∫ Gale", callback_data='gale_1')],
                [InlineKeyboardButton("Cancelar entrada", callback_data='cancelar_entrada')],
                [InlineKeyboardButton("WIN ‚úÖ", callback_data='win')],
                [InlineKeyboardButton("LOSS ‚ùå", callback_data='loss')],
                [InlineKeyboardButton("Pre√ßo N√£o Alcan√ßado üìâ", callback_data='preco_nao_alcancado')]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            # Mensagem de opera√ß√£o
            operation_icon = "üî¥" if operation_type == 'PUT' else "üü¢"
            message_text = (
                f"üöÄ *Hora de Lucrar!*\n"
                f"üéØ *5 Minutos de Expira√ß√£o*\n\n"
                f"Par: {par}\n"
                f"üíµ Pre√ßo: {preco}\n"
                f"‚è∞ Hora: {hora}\n"
                f"üìâ Opera√ß√£o: {operation_type} {operation_icon}\n\n"
                f"‚ö†Ô∏è 1 Gale permitido\n"
                f"Aguarde o sinal de confirma√ß√£o!\n\n"
                f"üì≤ [Clique aqui](https://broker-qx.pro/sign-up/?lid=949113) para abrir a corretora!"
            )

            # Enviando mensagem para o canal
            await context.bot.send_message(chat_id=CHANNEL_ID, text=message_text, parse_mode="Markdown")
            await update.message.reply_text(
                f"Resultado da opera√ß√£o {par} {preco} √†s {hora} ({operation_type}):",
                reply_markup=reply_markup
            )

        except ValueError:
            await update.message.reply_text("Formato de hora inv√°lido. Use o formato HH:MM.")

# Fun√ß√£o para gerar relat√≥rio
async def gerar_relatorio(update: Update, context: ContextTypes.DEFAULT_TYPE, operacoes, tipo):
    message = update.message if update.message else update.callback_query.message

    if not operacoes:
        await message.reply_text(f"Nenhuma opera√ß√£o registrada para gerar o relat√≥rio {tipo}.")
        return

    # Configurando a data do relat√≥rio
    tz_brasilia = pytz.timezone('America/Sao_Paulo')
    data = datetime.datetime.now(tz_brasilia).strftime("%d/%m")

    # Inicializando contadores
    wins = 0
    losses = 0
    cancelados = 0

    # Construindo o texto do relat√≥rio
    relatorio_text = f"üìä *Relat√≥rio de Opera√ß√µes - {data}*\n\n"

    for operacao in operacoes:
        par = operacao.get("par", "N/A")
        hora = operacao.get("hora", "N/A")
        tipo_operacao = operacao.get("tipo", "N/A")
        resultado = operacao.get("resultado", "N/A")

        # Mapeamento do status
        if resultado == "GAIN":
            status = "‚úÖ"
            wins += 1
        elif resultado == "LOSS":
            status = "‚ùå"
            losses += 1
        elif resultado == "CANCELADA":
            status = "üîï"
            cancelados += 1
        else:
            status = "N/A"

        relatorio_text += f"{par} üïí {hora} - {tipo_operacao} -> {status}\n"

    # Adicionando os totais
    relatorio_text += (
        f"\nüèÜ *Resultado {tipo.capitalize()}*\n"
        f"üéØ {wins} WIN{'s' if wins > 1 else ''}\n"
        f"‚ùå {losses} LOSS\n"
        f"üö´ {cancelados} Cancelado{'s' if cancelados > 1 else ''}"
    )

    # Enviando o relat√≥rio
    await message.edit_text(text=relatorio_text, parse_mode="Markdown")
    await context.bot.send_message(chat_id=CHANNEL_ID, text=relatorio_text, parse_mode="Markdown")

async def preco_nao_alcancado(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Mensagem quando o pre√ßo n√£o √© alcan√ßado
    preco_nao_alcancado_message = (
        "üìâ *Pre√ßo n√£o alcan√ßado:*\n"
        "‚è≥ *Aguarde o pr√≥ximo sinal!*"
    )

    # Enviando a mensagem para o canal e respondendo ao usu√°rio
    await update.callback_query.edit_message_text(text=preco_nao_alcancado_message, parse_mode="Markdown")
    await context.bot.send_message(chat_id=CHANNEL_ID, text=preco_nao_alcancado_message, parse_mode="Markdown")

# Fun√ß√£o "Novatos"
async def enviar_novatos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    novatos_message = (
        "üö® *ATEN√á√ÉO, NOVATOS!* üö®\n\n"
        "üåü *Comece a lucrar com a EMI TRADER ainda hoje!* üåü\n\n"
        "‚úÖ *1¬∫ Passo*: Garanta sua conta com $50.000 de cr√©dito demo para treinar sem risco!\n"
        "üëâ [Crie sua conta agora](https://broker-qx.pro/sign-up/?lid=949113)\n\n"
        "‚úÖ *2¬∫ Passo*: Aprenda a operar de forma segura e estrat√©gica!\n"
        "üé• Assista ao v√≠deo explicativo: [Clique aqui](https://youtu.be/R1mKfJ0wRmw)\n\n"
        "üî• *Est√° pronto para sua jornada rumo ao sucesso? A a√ß√£o come√ßa agora!* üöÄ"
    )
    await update.callback_query.edit_message_text(text=novatos_message, parse_mode="Markdown", disable_web_page_preview=True)
    await context.bot.send_message(chat_id=CHANNEL_ID, text=novatos_message, parse_mode="Markdown", disable_web_page_preview=True)

# Fun√ß√£o "Enquete - Experi√™ncia"
async def enviar_enquete_experiencia(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "üë§ *Qual √© o seu n√≠vel de experi√™ncia com trading?*"
    options = ["Iniciante", "Intermedi√°rio", "Avan√ßado"]
    await context.bot.send_poll(chat_id=CHANNEL_ID, question=question, options=options, is_anonymous=True)

# Fun√ß√£o "Enquete - Lucro"
async def enviar_enquete_lucro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = "üíöEMI TRADER fechou a manh√£ com uma SEQU√äNCIA IMBAT√çVEL! ‚úÖ\n\nE a√≠, quem garantiu o lucro comigo? üëáüèº"
    options = [
        "Sim, lucro garantido! ‚úÖ",
        "Meta atingida, como sempre! üèÜ",
        "Ah, perdi a hora...üòÖ"
    ]
    await context.bot.send_poll(chat_id=CHANNEL_ID, question=question, options=options, is_anonymous=True)

async def show_win_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üî• Win Direto: Explodimos no alvo! BOOM! üí•", callback_data='win_direto_boom')],
        [InlineKeyboardButton("‚úÖ Win Direto: Lucro √©pico, vit√≥ria de mestre! üéâ", callback_data='win_direto_foguete')],
        [InlineKeyboardButton("üéØ Win Direto: Sniper no mercado: acerto perfeito! üî´", callback_data='win_direto_sniper')],
        [InlineKeyboardButton("üåü Win Direto: Na precis√£o cir√∫rgica, √© WIN! ü©∫", callback_data='win_direto_cirurgica')],
        [InlineKeyboardButton("‚è±Ô∏è Win no Gale: Fizemos hist√≥ria nos √∫ltimos segundos! üïí", callback_data='win_gale_historia')],
        [InlineKeyboardButton("‚è≥ Win no Gale: No limite do tempo, lucro garantido! üí∞", callback_data='win_gale_limite')],
        [InlineKeyboardButton("üö® Win no Gale: Chegamos no limite, mas garantimos o lucro com for√ßa total! ‚ö°", callback_data='win_gale_forca_total')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text="Escolha uma op√ß√£o:", reply_markup=reply_markup)

async def show_loss_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ Vis√£o no alvo: O mercado segue, e nossa estrat√©gia evolui junto!", callback_data='loss_visao_alvo')],
        [InlineKeyboardButton("üî• Fortes como o mercado: O jogo virou? Calma, estamos prontos para dominar!", callback_data='loss_fortes_mercado')],
        [InlineKeyboardButton("üëÅÔ∏è Foco absoluto: Cada detalhe importa, e estamos na captura do pr√≥ximo WIN!", callback_data='loss_foco_absoluto')],
        [InlineKeyboardButton("üí° Pensamento estrat√©gico: Hoje aprendemos, amanh√£ conquistamos!", callback_data='loss_pensamento_estrategico')],
        [InlineKeyboardButton("üîç Caminho certo: Trope√ßos n√£o nos param; eles nos fortalecem!", callback_data='loss_caminho_certo')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text="Escolha uma op√ß√£o:", reply_markup=reply_markup)

async def process_win_choice(update: Update, context: ContextTypes.DEFAULT_TYPE, choice: str):
    global current_operation, relatorio
    win_messages = {
        'win_direto_boom': "üî• Win Direto: Explodimos no alvo! BOOM! üí•",
        'win_direto_foguete': "‚úÖ Win Direto: Lucro √©pico, vit√≥ria de mestre! üéâ",
        'win_direto_sniper': "üéØ Win Direto: Sniper no mercado: acerto perfeito! üî´",
        'win_direto_cirurgica': "üåü Win Direto: Na precis√£o cir√∫rgica, √© WIN! ü©∫",
        'win_gale_historia': "‚è±Ô∏è Win no Gale: Fizemos hist√≥ria nos √∫ltimos segundos! üïí",
        'win_gale_limite': "‚è≥ Win no Gale: No limite do tempo, lucro garantido! üí∞",
        'win_gale_forca_total': "üö® Win no Gale: Chegamos no limite, mas garantimos o lucro com for√ßa total! ‚ö°"
    }
    message_text = win_messages.get(choice, "Win registrado!")
    current_operation['resultado'] = 'GAIN'
    relatorio.append(current_operation)
    current_operation = {}
    await update.callback_query.edit_message_text(text=message_text)
    await context.bot.send_message(chat_id=CHANNEL_ID, text=message_text)
    await context.bot.send_sticker(chat_id=CHANNEL_ID, sticker=STICKER_WIN)

async def process_loss_choice(update: Update, context: ContextTypes.DEFAULT_TYPE, choice: str):
    global current_operation, relatorio
    loss_messages = {
        'loss_visao_alvo': "üöÄ Vis√£o no alvo: O mercado segue, e nossa estrat√©gia evolui junto!",
        'loss_fortes_mercado': "üî• Fortes como o mercado: O jogo virou? Calma, estamos prontos para dominar!",
        'loss_foco_absoluto': "üëÅÔ∏è Foco absoluto: Cada detalhe importa, e estamos na captura do pr√≥ximo WIN!",
        'loss_pensamento_estrategico': "üí° Pensamento estrat√©gico: Hoje aprendemos, amanh√£ conquistamos!",
        'loss_caminho_certo': "üîç Caminho certo: Trope√ßos n√£o nos param; eles nos fortalecem!"
    }
    message_text = loss_messages.get(choice, "Loss registrado!")
    current_operation['resultado'] = 'LOSS'
    relatorio.append(current_operation)
    current_operation = {}
    await update.callback_query.edit_message_text(text=message_text)
    await context.bot.send_message(chat_id=CHANNEL_ID, text=message_text)
    await context.bot.send_sticker(chat_id=CHANNEL_ID, sticker=STICKER_LOSS)

# Fun√ß√£o para cancelar entrada
async def cancelar_entrada(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_operation, relatorio

    # Mensagem de cancelamento
    cancel_message = (
        "üîï Gale cancelado:\n"
        "A estrat√©gia manda, seguimos firmes!\n\n"
        "‚è≥ Aguarde o pr√≥ximo sinal."
    )

    # Registra a opera√ß√£o como cancelada no relat√≥rio
    if 'par' in current_operation:
        current_operation['resultado'] = 'CANCELADA'
        relatorio.append(current_operation)  # Adiciona ao relat√≥rio
        current_operation = {}  # Reseta a opera√ß√£o atual
    else:
        # No caso de n√£o haver opera√ß√£o ativa, apenas envia a mensagem
        cancel_message = "Nenhuma opera√ß√£o ativa para cancelar."

    await update.callback_query.edit_message_text(text=cancel_message, parse_mode="Markdown")
    await context.bot.send_message(chat_id=CHANNEL_ID, text=cancel_message)

# Fun√ß√£o para encerrar sess√£o
async def encerrar_sessao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global relatorio, relatorio_total
    encerrar_message = (
        "üõë Sess√£o Encerrada!\n\n"
        "‚ú® Gratid√£o por estar conosco na EMI-TRADER!\n"
        "üíº Amanh√£ √© um novo dia para conquistar o mercado.\n\n"
        "üìà Lembre-se: consist√™ncia √© a chave, e os gr√°ficos sempre estar√£o a seu favor! üöÄ"
    )
    await update.callback_query.edit_message_text(text=encerrar_message, parse_mode="Markdown")
    await context.bot.send_message(chat_id=CHANNEL_ID, text=encerrar_message, parse_mode="Markdown")

    # Transferindo o relat√≥rio parcial para o relat√≥rio total e limpando o relat√≥rio parcial
    relatorio_total.extend(relatorio)
    relatorio = []

async def send_sticker_at_830(context: ContextTypes.DEFAULT_TYPE):
    """Fun√ß√£o para enviar o sticker de 'Sess√£o Iniciada' √†s 21:00 diariamente."""
    while True:
        try:
            now = datetime.datetime.now(pytz.timezone('America/Sao_Paulo'))
            target_time = now.replace(hour=21, minute=0, second=0, microsecond=0)

            # Se o tempo alvo j√° passou no dia de hoje, ajuste para o dia seguinte
            if now > target_time:
                target_time += datetime.timedelta(days=1)

            wait_time = (target_time - now).total_seconds()
            await asyncio.sleep(wait_time)
            await context.bot.send_sticker(chat_id=CHANNEL_ID, sticker=STICKER_SESSAO_INICIADA)
        except Exception as e:
            print(f"Erro inesperado: {e}")

# === WEBHOOK CONFIG ===

async def webhook(request):
    data = await request.json()
    update = Update.de_json(data, app.bot)
    await app.process_update(update)
    return web.Response(status=200)

async def main():
    global app
    app = ApplicationBuilder().token('7372781018:AAGp67ScEVsyQFr6FQo2HezNKAS8zqjJwAU').build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_signal))
    asyncio.create_task(send_sticker_at_830(app))
    
    webhook_url = "https://emitrader-bot-production.up.railway.app/webhook"
    await app.bot.set_webhook(webhook_url)

    aio_app = web.Application()
    aio_app.router.add_post("/webhook", webhook)

    runner = web.AppRunner(aio_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    await site.start()

    print(f"‚úÖ Webhook ativo em {webhook_url}")
    while True:
        await asyncio.sleep(3600)

if __name__ == '__main__':
    nest_asyncio.apply()
    asyncio.run(main())
